#!/usr/bin/env python
# coding: utf-8

# ## Izmir green space analysis with OSM data Step-1
# This project aims to analyze the spatial distribution of green spaces of Izmır by counting number of green areas at neighbourhood and borough levels.
# The projects accomplished in three steps:
# 1. It starts with extracting OSM Izmir green areas data and continous with the data cleaning.
# 2. At the second step, the existing neighbourhood shapefile is prepared for the spatial join by filtering and cleaning unnecessary entries. Then, the Izmir borough data is generated by aggregating the neighbourhood shapefile. 
# 3. In this step, Osm İzmir green areas data and shapefile data are spatially joined together and used for the analysis.
# 

# In[1]:


import osmnx as ox
import pandas as pd
import geopandas as gpd
import matplotlib.pyplot as plt


# In[2]:


tags = {
    "leisure": ["park", "garden", "playground","pitch", "recreation_ground"], 
    "landuse": "forest"   
}
green_izmir = ox.features_from_place("Izmir, Turkey", tags)


# In[3]:


green_izmir.head()


# In[4]:


green_izmir.info()


# In[5]:


green_izmir.isnull().sum()


# ### Data Filtering
# Izmır OSM green space dataset consists of a total of 4.306 records and 83 columns.
# Since the analysis focuses on the number of green areas per neighbourhood and borough, there is no need to keep all the columns.
# We will keep only necessary columns and rmove the rest.
# 

# In[6]:


green_izmir_filtered = green_izmir[["geometry", "leisure", "landuse", "natural", "name"]]


# In[7]:


green_izmir_filtered.head()


# ### Geometries Type
# The entries in the geometry column have different types of geometries; Polygon,MultiPolygon, Point.
# Since only the number of green spaces are needed, all geometies will be converted to Point type. 

# In[8]:


green_izmir_filtered.geom_type.value_counts()


# In[9]:


green_points_izmir = green_izmir_filtered.copy()


# In[10]:


# green_points_izmir["geometry"] = green_points_izmir["geometry"].centroid


# In[11]:


green_points_izmir.crs


# ### Converting CRS
# The geometry records in the dataset have CRS in __degrees__. This can couse errors when calculating centrids. Therefore, the CRS will first be converted to __meters__ and then back to __degrees.__
# 

# In[12]:


green_points_izmir_proj =green_points_izmir.to_crs(epsg=3857)


# In[13]:


green_points_izmir_proj.crs


# In[14]:


green_points_izmir_proj["geometry"] = green_points_izmir_proj["geometry"].centroid


# In[15]:


green_points_izmir_proj.head()


# In[16]:


green_points_izmir_proj.geom_type.value_counts()


# In[17]:


green_points_izmir_deg = green_points_izmir_proj.to_crs(green_points_izmir.crs)


# In[18]:


green_points_izmir_deg.crs


# In[19]:


fig, ax = plt.subplots(figsize=(10,10))
green_points_izmir_deg.plot(ax=ax, color = "lightgreen", edgecolor = "gray", linewidth = 0.5)
green_points_izmir_deg.plot(ax = ax, color="green",markersize = 10)
plt.title("İzmir OSM Green Areas")
plt.show()


# In[20]:


green_points_izmir_deg.to_file("Izmır_green_data.gpkg", layer='points', driver="GPKG")


# In[21]:


gdf = gpd.read_file("Izmır_green_data.gpkg")


# In[22]:


gdf.head()


# In[23]:


gdf.info()


# ### Outcome
# The dataset is now ready with consistent point geometries, proper CRS, and only relevant attributes. This ensures accurate spatial analysis in the next step.
# 
# ### Transition to Step-2
# The next step will focus on preparing the neighbourhood shapefile for the spatial join, which includes filtering, cleaning, and generating borough-level boundaries from the neighbourhood data.

# In[ ]:




